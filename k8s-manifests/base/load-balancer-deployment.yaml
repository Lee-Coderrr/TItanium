apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-balancer-deployment
  labels:
    app: load-balancer
    component: lb
    app.kubernetes.io/component: load-balancer
    app.kubernetes.io/layer: infrastructure
  annotations:
    deployment.kubernetes.io/revision: "1"
    titanium.io/service-type: load-balancer
spec:
  replicas: 1  # overlay에서 환경별 변경
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: load-balancer
  template:
    metadata:
      labels:
        app: load-balancer
        component: lb
        app.kubernetes.io/component: load-balancer
        app.kubernetes.io/layer: infrastructure
      annotations:
#        checksum/config: "{{ .Checksum }}"
        prometheus.io/scrape: "true"
        prometheus.io/port: "7100"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: load-balancer-container
        image: dongju101/titanium-lb:latest  # overlay에서 태그 변경
        imagePullPolicy: Always
        ports:
        - containerPort: 7100
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: app-config
        env:
        - name: SERVICE_NAME
          value: "load-balancer"
        - name: SERVICE_PORT
          value: "7100"
        - name: CURRENT_ENV
          value: "PLACEHOLDER_ENV"  # replacements로 치환됨
        - name: INTERNAL_API_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: INTERNAL_API_SECRET
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:  # overlay에서 환경별 오버라이드
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /lb-health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /lb-health
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /lb-health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: var-run-volume
          mountPath: /var/run
        - name: app-logs
          mountPath: /var/log/app
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: var-run-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: app-logs
        emptyDir:
          sizeLimit: 500Mi
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst