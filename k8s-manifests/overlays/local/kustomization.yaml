apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

metadata:
  name: titanium-local
  annotations:
    titanium.io/environment: local
    titanium.io/purpose: development
    titanium.io/maintainer: development-team

# 🔥 namespace.yaml 추가
resources:
- ../../base
- namespace.yaml              # ← Namespace 리소스 추가

# 환경별 labels
labels:
- pairs:
    environment: local
    tier: development
    titanium.io/cost-center: development
    titanium.io/debug-mode: "true"
  includeSelectors: false
  includeTemplates: true

# 환경별 annotations
commonAnnotations:
  titanium.io/debug-enabled: "true"
  titanium.io/resource-profile: minimal
  titanium.io/monitoring: disabled
  dev.titanium.io/hot-reload: "true"

namePrefix: local-
nameSuffix: -dev
namespace: titanium-local

# 로컬 개발용 낮은 replica 설정
replicas:
- name: api-gateway-deployment
  count: 1
- name: auth-service-deployment
  count: 1
- name: dashboard-ui-deployment
  count: 1
- name: load-balancer-deployment
  count: 1
- name: user-service-deployment
  count: 1
- name: redis-deployment
  count: 1

# 🔥 (리팩토링) 로컬 개발용 :dev 이미지 태그 사용
images:
- name: dongju101/titanium-api
  newTag: dev
- name: dongju101/titanium-auth-service
  newTag: dev
- name: dongju101/titanium-ui
  newTag: dev
- name: dongju101/titanium-lb
  newTag: dev
- name: dongju101/titanium-user-service
  newTag: dev
- name: redis
  newTag: 7-alpine # redis는 공식 이미지를 그대로 사용

# 로컬 환경용 ConfigMap 설정
configMapGenerator:
- name: app-config
  behavior: merge
  literals:
  - LOAD_BALANCER_URL=http://local-load-balancer-service-dev:7100
  - API_GATEWAY_URL=http://local-api-gateway-service-dev:8000
  - DASHBOARD_UI_URL=http://local-dashboard-ui-service-dev:80
  - USER_SERVICE_URL=http://local-user-service-dev:8001
  - AUTH_SERVICE_URL=http://local-auth-service-dev:8002
  - ENVIRONMENT=local
  - LOG_LEVEL=DEBUG
  - LOG_FORMAT=pretty
  - DEBUG_MODE=true
  - METRICS_ENABLED=false
  - TRACING_ENABLED=false
  - CORS_ALLOWED_ORIGINS=*
  - RATE_LIMIT_ENABLED=false
  - PROMETHEUS_ENABLED=false
  - JAEGER_ENABLED=false
  - HEALTH_CHECK_INTERVAL=60
  - REDIS_TIMEOUT=10000
  - TOKEN_EXPIRY=7200
  - REFRESH_TOKEN_EXPIRY=172800

# 로컬 환경용 Secret
secretGenerator:
- name: app-secrets
  behavior: merge
  literals:
  - INTERNAL_API_SECRET=bG9jYWwtZGV2LXNlY3JldC1rZXktMjAyNA==
  - JWT_SECRET_KEY=bG9jYWwtand0LXNlY3JldC1mb3ItZGV2ZWxvcG1lbnQ=
  - DB_ENCRYPTION_KEY=bG9jYWwtZGIta2V5
  - REDIS_PASSWORD=

patches:
# (NodePort로 변경하는 서비스 패치는 이전과 동일)
- target:
    kind: Service
    name: load-balancer-service
  patch: |-
    - op: replace
      path: /spec/type
      value: NodePort
    - op: add
      path: /spec/ports/0/nodePort
      value: 30700
- target:
    kind: Service
    name: api-gateway-service
  patch: |-
    - op: replace
      path: /spec/type
      value: NodePort
    - op: add
      path: /spec/ports/0/nodePort
      value: 30800

# 로컬 환경 최적화 패치 파일 포함
- path: patches.yaml

# 로컬 이미지를 사용하도록 ImagePullPolicy 변경
- patch: |-
    - op: replace
      path: /spec/template/spec/containers/0/imagePullPolicy
      value: IfNotPresent
  target:
    kind: Deployment
    name: ".*-deployment" # 정규식을 사용하여 모든 Deployment에 적용

replacements:
- source:
    # 🏃 소스(Source): 이름이 'redis-service'인 Service 리소스에서
    kind: Service
    name: redis-service
    # 🎯 필드 경로(Field Path): 'metadata.name' 값을 가져옵니다.
    # (Kustomize가 빌드 과정에서 'local-redis-service-dev' 라는 최종 이름을 가져옵니다)
    fieldPath: metadata.name
  targets:
  - select:
      # 🏃 타겟(Target): 'app-config'라는 이름의 ConfigMap을 선택하여
      kind: ConfigMap
      name: app-config
    # 🎯 필드 경로(Field Path): 'data.REDIS_HOST' 필드에 위에서 가져온 값을 주입합니다.
    fieldPaths:
    - data.REDIS_HOST