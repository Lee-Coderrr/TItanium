# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: Build and Push Docker Images

# 이 워크플로우가 언제 실행될지 트리거를 정의합니다.
on:
  # 'main' 브랜치에 코드가 푸시될 때 실행됩니다.
  push:
    branches: [ "main" ]

# 실제 수행할 작업(job)들을 정의합니다.
jobs:
  # 'build-and-push' 라는 이름의 작업을 정의합니다.
  build-and-push:
    # 이 작업은 최신 버전의 우분투(리눅스) 환경에서 실행됩니다.
    runs-on: ubuntu-latest

    # 작업의 단계(step)들을 순서대로 정의합니다.
    steps:
      # 1. 저장소의 코드를 가상 머신으로 내려받습니다. (체크아웃)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 저장해둔 Secrets를 사용하여 Docker Hub에 로그인합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. 로드 밸런서 이미지를 빌드하고 Docker Hub에 푸시합니다.
      - name: Build and push load-balancer
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/titanium-lb:latest ./load_balancer
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/titanium-lb:latest

      # 4. API 게이트웨이 이미지를 빌드하고 Docker Hub에 푸시합니다.
      - name: Build and push api-gateway
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/titanium-api:latest ./api_gateway
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/titanium-api:latest

# 새로운 'deploy' 작업을 추가합니다.
  deploy:
    # 이 작업은 'build-and-push' 작업이 성공적으로 끝나야 시작됩니다.
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # 1. SSH 접속 및 원격 명령 실행을 위한 액션을 사용합니다.
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            # EC2 서버에서 실행될 스크립트입니다.
            # 먼저, 최신 코드를 받기 위해 git clone 또는 pull을 합니다. (최초 실행 시)
            # 프로젝트 디렉토리가 없다면 git clone을 실행합니다.
            
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            
            
            if [ ! -d "TItanium" ]; then
              git clone git@github.com:Lee-Coderrr/TItanium.git
            fi
            
            # 프로젝트 디렉토리로 이동
            cd TItanium
            
            # 최신 코드로 업데이트
            git pull
            
            # Docker Hub에 로그인
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            
            # docker-compose.yml에 정의된 이미지의 최신 버전을 내려받습니다.
            docker-compose pull
            
            # 컨테이너를 최신 이미지로 다시 시작합니다.
            # 변경된 컨테이너만 재시작되어 서비스 중단을 최소화합니다.
            docker-compose up -d