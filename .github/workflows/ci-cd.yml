# .github/workflows/deploy-to-ec2.yml
name: Build, Push, and Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  # 1단계: 모든 마이크로서비스의 Docker 이미지를 빌드하고 Docker Hub에 푸시합니다.
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- 각 마이크로서비스 이미지 빌드 및 푸시 ---
      - name: Build and push load-balancer
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/titanium-lb:latest ./load-balancer
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/titanium-lb:latest

      - name: Build and push api-gateway
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/titanium-api:latest ./api-gateway
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/titanium-api:latest

      - name: Build and push user-service
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/titanium-user-service:latest ./user-service
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/titanium-user-service:latest

      - name: Build and push auth-service
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/titanium-auth-service:latest ./auth-service
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/titanium-auth-service:latest

      - name: Build and push dashboard-ui
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/titanium-ui:latest ./dashboard-ui
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/titanium-ui:latest

  # 2단계: EC2 서버에 접속하여 Docker Compose로 모든 서비스를 실행합니다.
  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            # --- EC2 서버에서 실행될 전체 스크립트 ---
            
            # 1. GitHub 저장소에 접속하기 위한 호스트 키를 등록합니다.
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            
            # 2. 프로젝트 폴더로 이동하고 최신 코드를 받아옵니다.
            if [ ! -d "TItanium" ]; then
              git clone git@github.com:Lee-Coderrr/TItanium.git
            fi
            cd TItanium
            git pull
            
            # 3. Docker Hub ID를 환경 변수로 설정합니다.
            export DOCKER_HUB_ID=${{ secrets.DOCKERHUB_USERNAME }}

            # 4. Docker Hub에 로그인하여 private 이미지를 받을 수 있도록 준비합니다.
            docker login -u $DOCKER_HUB_ID -p ${{ secrets.DOCKERHUB_TOKEN }}
            
            # 5. docker-compose.yml에 정의된 모든 서비스의 최신 이미지를 내려받습니다.
            #    (이 과정에서 새로 추가된 user-service와 auth-service 이미지도 함께 받아옵니다.)
            docker-compose pull
            
            # 6. 최신 이미지로 모든 컨테이너를 다시 시작합니다.
            #    --remove-orphans 옵션은 더 이상 사용하지 않는 컨테이너를 제거합니다.
            docker-compose up -d --remove-orphans
            
            # 7. 사용하지 않는 옛날 도커 이미지를 정리하여 서버 용량을 확보합니다.
            docker image prune -af
